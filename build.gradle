plugins {
    id 'java'
    id 'org.springframework.boot' apply(false)
    id 'io.spring.dependency-management' apply(false)
    id 'org.openapi.generator' apply(false)
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    group = 'com.shop'
    version = '0.0.1-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs << '-parameters'
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation "org.openapitools:jackson-databind-nullable:${jacksonVersion}"
        implementation "org.apache.commons:commons-lang3:${lang3Version}"
        implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:${springDocVersion}" exclude group: "org.apache.commons", module: "commons-lang3"
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.springframework.boot:spring-boot-testcontainers'
        implementation 'org.testcontainers:junit-jupiter'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testImplementation platform("org.junit:junit-bom:${junitBomVersion}")
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.testcontainers:testcontainers'

        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    tasks.withType(Test).tap {
        configureEach {
            useJUnitPlatform()

            jvmArgs += ["-XX:+EnableDynamicAgentLoading"]

            testLogging {
                events("passed", "skipped", "failed")
                exceptionFormat = "full"

                lifecycle {
                    showStandardStreams = true
                }
            }

            afterSuite { desc, result ->
                if (!desc.parent) {
                    println "--------------------------------------------------"
                    println "Тестов всего: ${result.testCount}"
                    println "Успешно:      ${result.successfulTestCount}"
                    println "Провалено:    ${result.failedTestCount}"
                    println "Пропущено:    ${result.skippedTestCount}"
                    println "Результат:    ${result.resultType}"
                    println "--------------------------------------------------"
                }
            }
        }
    }
}
